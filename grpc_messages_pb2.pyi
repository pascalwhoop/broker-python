# @generated by generate_proto_mypy_stubs.py.  Do not edit!
from typing import (
    Text,
    Callable,
    Iterable,
    List,
    Optional,
    Tuple,
    cast,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
)

from google.protobuf.service import (
    RpcChannel,
    Service,
    RpcController,
)

from abc import (
    ABCMeta,
    abstractmethod,
)

from concurrent.futures import (
    Future,
)

class PBCustomerClass(int):
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> int: ...
    @classmethod
    def keys(cls) -> List[str]: ...
    @classmethod
    def values(cls) -> List[int]: ...
    @classmethod
    def items(cls) -> List[Tuple[str, int]]: ...
SMALL = cast(PBCustomerClass, 0)
LARGE = cast(PBCustomerClass, 1)

class PBResponseTime(int):
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> int: ...
    @classmethod
    def keys(cls) -> List[str]: ...
    @classmethod
    def values(cls) -> List[int]: ...
    @classmethod
    def items(cls) -> List[Tuple[str, int]]: ...
SECONDS = cast(PBResponseTime, 0)
MINUTES = cast(PBResponseTime, 1)

class PBTxType(int):
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> int: ...
    @classmethod
    def keys(cls) -> List[str]: ...
    @classmethod
    def values(cls) -> List[int]: ...
    @classmethod
    def items(cls) -> List[Tuple[str, int]]: ...
PUBLISH = cast(PBTxType, 0)
PRODUCE = cast(PBTxType, 1)
CONSUME = cast(PBTxType, 2)
PERIODIC = cast(PBTxType, 3)
SIGNUP = cast(PBTxType, 4)
WITHDRAW = cast(PBTxType, 5)
REVOKE = cast(PBTxType, 6)
REFUND = cast(PBTxType, 7)

class PBStatus(int):
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> int: ...
    @classmethod
    def keys(cls) -> List[str]: ...
    @classmethod
    def values(cls) -> List[int]: ...
    @classmethod
    def items(cls) -> List[Tuple[str, int]]: ...
success = cast(PBStatus, 0)
noSuchTariff = cast(PBStatus, 1)
noSuchUpdate = cast(PBStatus, 2)
illegalOperation = cast(PBStatus, 3)
invalidTariff = cast(PBStatus, 4)
invalidUpdate = cast(PBStatus, 5)
duplicateId = cast(PBStatus, 6)
invalidPowerType = cast(PBStatus, 7)
unsupported = cast(PBStatus, 8)

class PBCallCompleted(Message):
    completed = ... # type: bool
    msg = ... # type: Text
    
    def __init__(self,
        completed : bool = None,
        msg : Text = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCallCompleted: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBRequestStream(Message):
    msg = ... # type: Text
    
    def __init__(self,
        msg : Text = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBRequestStream: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBActivate(Message):
    timeslotIndex = ... # type: int
    
    def __init__(self,
        timeslotIndex : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBActivate: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBOrder(Message):
    id = ... # type: int
    broker = ... # type: Text
    timeslot = ... # type: int
    mWh = ... # type: float
    limitPrice = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        timeslot : int = None,
        mWh : float = None,
        limitPrice : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBOrder: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBCompetition(Message):
    id = ... # type: int
    name = ... # type: Text
    description = ... # type: Text
    pomId = ... # type: Text
    timeslotLength = ... # type: int
    bootstrapTimeslotCount = ... # type: int
    bootstrapDiscardedTimeslots = ... # type: int
    minimumTimeslotCount = ... # type: int
    expectedTimeslotCount = ... # type: int
    timeslotsOpen = ... # type: int
    deactivateTimeslotsAhead = ... # type: int
    minimumOrderQuantity = ... # type: float
    simulationBaseTime = ... # type: int
    timezoneOffset = ... # type: int
    latitude = ... # type: int
    simulationRate = ... # type: int
    simulationModulo = ... # type: int
    brokers = ... # type: RepeatedScalarFieldContainer[Text]
    
    @property
    def customer(self) -> RepeatedScalarFieldContainer[PBCustomerInfo]: ...
    
    def __init__(self,
        id : int = None,
        name : Text = None,
        description : Text = None,
        pomId : Text = None,
        timeslotLength : int = None,
        bootstrapTimeslotCount : int = None,
        bootstrapDiscardedTimeslots : int = None,
        minimumTimeslotCount : int = None,
        expectedTimeslotCount : int = None,
        timeslotsOpen : int = None,
        deactivateTimeslotsAhead : int = None,
        minimumOrderQuantity : float = None,
        simulationBaseTime : int = None,
        timezoneOffset : int = None,
        latitude : int = None,
        simulationRate : int = None,
        simulationModulo : int = None,
        brokers : Iterable[Text] = None,
        customer : Iterable[PBCustomerInfo] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCompetition: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBBroker(Message):
    class MktPositionsEntry(Message):
        key = ... # type: int
        
        @property
        def value(self) -> PBMarketPosition: ...
        
        def __init__(self,
            key : int = None,
            value : PBMarketPosition = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> PBBroker.MktPositionsEntry: ...
        def MergeFrom(self, other_msg: Message) -> None: ...
        def CopyFrom(self, other_msg: Message) -> None: ...
    
    id = ... # type: int
    username = ... # type: Text
    password = ... # type: Text
    key = ... # type: Text
    queueName = ... # type: Text
    enabled = ... # type: bool
    local = ... # type: bool
    idPrefix = ... # type: int
    wholesale = ... # type: bool
    cash = ... # type: float
    
    @property
    def mktPositions(self) -> RepeatedScalarFieldContainer[PBBroker.MktPositionsEntry]: ...
    
    def __init__(self,
        id : int = None,
        username : Text = None,
        password : Text = None,
        key : Text = None,
        queueName : Text = None,
        enabled : bool = None,
        local : bool = None,
        idPrefix : int = None,
        wholesale : bool = None,
        cash : float = None,
        mktPositions : Iterable[PBBroker.MktPositionsEntry] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBBroker: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBCustomer(Message):
    idCounter = ... # type: int
    id = ... # type: int
    idCustomerInfo = ... # type: int
    name = ... # type: Text
    population = ... # type: int
    powerType = ... # type: Text
    controllableKW = ... # type: float
    upRegulationKW = ... # type: float
    downRegulationKW = ... # type: float
    storageCapacity = ... # type: float
    multiContracting = ... # type: bool
    canNegotiate = ... # type: bool
    genericPowerType = ... # type: Text
    bootstrapNetUsage = ... # type: RepeatedScalarFieldContainer[float]
    customerClass = ... # type: Text
    
    @property
    def retail(self) -> PBRetailKPIHolder: ...
    
    def __init__(self,
        idCounter : int = None,
        id : int = None,
        idCustomerInfo : int = None,
        name : Text = None,
        population : int = None,
        powerType : Text = None,
        controllableKW : float = None,
        upRegulationKW : float = None,
        downRegulationKW : float = None,
        storageCapacity : float = None,
        multiContracting : bool = None,
        canNegotiate : bool = None,
        genericPowerType : Text = None,
        bootstrapNetUsage : Iterable[float] = None,
        retail : PBRetailKPIHolder = None,
        customerClass : Text = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCustomer: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBRetailKPIHolder(Message):
    subscribedPopulation = ... # type: int
    kwh = ... # type: float
    money = ... # type: float
    activeTariffs = ... # type: int
    revokedTariffs = ... # type: int
    publishedTariffs = ... # type: int
    
    def __init__(self,
        subscribedPopulation : int = None,
        kwh : float = None,
        money : float = None,
        activeTariffs : int = None,
        revokedTariffs : int = None,
        publishedTariffs : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBRetailKPIHolder: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBBankTransaction(Message):
    id = ... # type: int
    broker = ... # type: Text
    postedTimeslot = ... # type: int
    amount = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        postedTimeslot : int = None,
        amount : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBBankTransaction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBCashPosition(Message):
    id = ... # type: int
    broker = ... # type: Text
    postedTimeslot = ... # type: int
    balance = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        postedTimeslot : int = None,
        balance : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCashPosition: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBDistributionReport(Message):
    id = ... # type: int
    timeslot = ... # type: int
    totalConsumption = ... # type: float
    totalProduction = ... # type: float
    
    def __init__(self,
        id : int = None,
        timeslot : int = None,
        totalConsumption : float = None,
        totalProduction : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBDistributionReport: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBBalancingTransaction(Message):
    id = ... # type: int
    broker = ... # type: Text
    postedTimeslot = ... # type: int
    kWh = ... # type: float
    charge = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        postedTimeslot : int = None,
        kWh : float = None,
        charge : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBBalancingTransaction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBClearedTrade(Message):
    id = ... # type: int
    timeslot = ... # type: int
    executionPrice = ... # type: float
    executionMWh = ... # type: float
    dateExecuted = ... # type: int
    
    def __init__(self,
        id : int = None,
        timeslot : int = None,
        executionPrice : float = None,
        executionMWh : float = None,
        dateExecuted : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBClearedTrade: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBDistributionTransaction(Message):
    id = ... # type: int
    broker = ... # type: Text
    postedTimeslot = ... # type: int
    kWh = ... # type: float
    nSmall = ... # type: int
    nLarge = ... # type: int
    charge = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        postedTimeslot : int = None,
        kWh : float = None,
        nSmall : int = None,
        nLarge : int = None,
        charge : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBDistributionTransaction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBCapacityTransaction(Message):
    id = ... # type: int
    broker = ... # type: Text
    postedTimeslot = ... # type: int
    peakTimeslot = ... # type: int
    threshold = ... # type: float
    kWh = ... # type: float
    charge = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        postedTimeslot : int = None,
        peakTimeslot : int = None,
        threshold : float = None,
        kWh : float = None,
        charge : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCapacityTransaction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBMarketBootstrapData(Message):
    id = ... # type: int
    mwh = ... # type: RepeatedScalarFieldContainer[float]
    marketPrice = ... # type: RepeatedScalarFieldContainer[float]
    
    def __init__(self,
        id : int = None,
        mwh : Iterable[float] = None,
        marketPrice : Iterable[float] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBMarketBootstrapData: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBMarketPosition(Message):
    id = ... # type: int
    broker = ... # type: Text
    timeslot = ... # type: int
    overallBalance = ... # type: float
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        timeslot : int = None,
        overallBalance : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBMarketPosition: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBTimeslot(Message):
    serialNumber = ... # type: int
    startInstant = ... # type: int
    
    def __init__(self,
        serialNumber : int = None,
        startInstant : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBTimeslot: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBMarketTransaction(Message):
    id = ... # type: int
    broker = ... # type: Text
    postedTimeslot = ... # type: int
    price = ... # type: float
    mWh = ... # type: float
    timeslot = ... # type: int
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        postedTimeslot : int = None,
        price : float = None,
        mWh : float = None,
        timeslot : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBMarketTransaction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBOrderbook(Message):
    id = ... # type: int
    dateExecuted = ... # type: int
    timeslot = ... # type: int
    clearingPrice = ... # type: float
    
    @property
    def bids(self) -> RepeatedScalarFieldContainer[PBOrderbookOrder]: ...
    
    @property
    def asks(self) -> RepeatedScalarFieldContainer[PBOrderbookOrder]: ...
    
    def __init__(self,
        id : int = None,
        dateExecuted : int = None,
        timeslot : int = None,
        clearingPrice : float = None,
        bids : Iterable[PBOrderbookOrder] = None,
        asks : Iterable[PBOrderbookOrder] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBOrderbook: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBOrderbookOrder(Message):
    id = ... # type: int
    limitPrice = ... # type: float
    mWh = ... # type: float
    
    def __init__(self,
        id : int = None,
        limitPrice : float = None,
        mWh : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBOrderbookOrder: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBWeatherForecast(Message):
    id = ... # type: int
    currentTimeslot = ... # type: int
    
    @property
    def predictions(self) -> RepeatedScalarFieldContainer[PBWeatherForecastPrediction]: ...
    
    def __init__(self,
        id : int = None,
        currentTimeslot : int = None,
        predictions : Iterable[PBWeatherForecastPrediction] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBWeatherForecast: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBWeatherForecastPrediction(Message):
    id = ... # type: int
    forecastTime = ... # type: int
    temperature = ... # type: float
    windSpeed = ... # type: float
    windDirection = ... # type: float
    cloudCover = ... # type: float
    
    def __init__(self,
        id : int = None,
        forecastTime : int = None,
        temperature : float = None,
        windSpeed : float = None,
        windDirection : float = None,
        cloudCover : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBWeatherForecastPrediction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBWeatherReport(Message):
    id = ... # type: int
    currentTimeslot = ... # type: int
    temperature = ... # type: float
    windSpeed = ... # type: float
    windDirection = ... # type: float
    cloudCover = ... # type: float
    
    def __init__(self,
        id : int = None,
        currentTimeslot : int = None,
        temperature : float = None,
        windSpeed : float = None,
        windDirection : float = None,
        cloudCover : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBWeatherReport: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBBalanceReport(Message):
    id = ... # type: int
    netImbalance = ... # type: float
    timeslotIndex = ... # type: int
    
    def __init__(self,
        id : int = None,
        netImbalance : float = None,
        timeslotIndex : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBBalanceReport: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBPowerType(Message):
    label = ... # type: Text
    
    def __init__(self,
        label : Text = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBPowerType: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBCustomerBootstrapData(Message):
    id = ... # type: int
    customerName = ... # type: Text
    netUsage = ... # type: RepeatedScalarFieldContainer[float]
    
    @property
    def powerType(self) -> PBPowerType: ...
    
    def __init__(self,
        id : int = None,
        customerName : Text = None,
        powerType : PBPowerType = None,
        netUsage : Iterable[float] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCustomerBootstrapData: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBCustomerInfo(Message):
    id = ... # type: int
    name = ... # type: Text
    population = ... # type: int
    customerClass = ... # type: PBCustomerClass
    controllableKW = ... # type: float
    upRegulationKW = ... # type: float
    downRegulationKW = ... # type: float
    storageCapacity = ... # type: float
    
    @property
    def powerType(self) -> PBPowerType: ...
    
    def __init__(self,
        id : int = None,
        name : Text = None,
        population : int = None,
        powerType : PBPowerType = None,
        customerClass : PBCustomerClass = None,
        controllableKW : float = None,
        upRegulationKW : float = None,
        downRegulationKW : float = None,
        storageCapacity : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBCustomerInfo: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBRateCore(Message):
    tariffId = ... # type: int
    id = ... # type: int
    
    def __init__(self,
        tariffId : int = None,
        id : int = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBRateCore: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBRate(Message):
    tariffId = ... # type: int
    id = ... # type: int
    weeklyBegin = ... # type: int
    weeklyEnd = ... # type: int
    dailyBegin = ... # type: int
    dailyEnd = ... # type: int
    tierThreshold = ... # type: float
    fixed = ... # type: bool
    minValue = ... # type: float
    maxValue = ... # type: float
    noticeInterval = ... # type: int
    expectedMean = ... # type: float
    maxCurtailment = ... # type: float
    
    def __init__(self,
        tariffId : int = None,
        id : int = None,
        weeklyBegin : int = None,
        weeklyEnd : int = None,
        dailyBegin : int = None,
        dailyEnd : int = None,
        tierThreshold : float = None,
        fixed : bool = None,
        minValue : float = None,
        maxValue : float = None,
        noticeInterval : int = None,
        expectedMean : float = None,
        maxCurtailment : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBRate: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBRegulationRate(Message):
    tariffId = ... # type: int
    id = ... # type: int
    upRegulationPayment = ... # type: float
    downRegulationPayment = ... # type: float
    response = ... # type: PBResponseTime
    
    def __init__(self,
        tariffId : int = None,
        id : int = None,
        upRegulationPayment : float = None,
        downRegulationPayment : float = None,
        response : PBResponseTime = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBRegulationRate: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBTariffSpecification(Message):
    id = ... # type: int
    broker = ... # type: Text
    expiration = ... # type: int
    minDuration = ... # type: int
    signupPayment = ... # type: float
    earlyWithdrawPayment = ... # type: float
    periodicPayment = ... # type: float
    supersedes = ... # type: RepeatedScalarFieldContainer[int]
    
    @property
    def powerType(self) -> PBPowerType: ...
    
    @property
    def rates(self) -> RepeatedScalarFieldContainer[PBRate]: ...
    
    @property
    def regulationRates(self) -> RepeatedScalarFieldContainer[PBRegulationRate]: ...
    
    def __init__(self,
        id : int = None,
        broker : Text = None,
        expiration : int = None,
        minDuration : int = None,
        powerType : PBPowerType = None,
        signupPayment : float = None,
        earlyWithdrawPayment : float = None,
        periodicPayment : float = None,
        rates : Iterable[PBRate] = None,
        regulationRates : Iterable[PBRegulationRate] = None,
        supersedes : Iterable[int] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBTariffSpecification: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBTariffStatus(Message):
    tariffId = ... # type: int
    updateId = ... # type: int
    _message = ... # type: Text
    status = ... # type: PBStatus
    
    def __init__(self,
        tariffId : int = None,
        updateId : int = None,
        _message : Text = None,
        status : PBStatus = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBTariffStatus: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBTariffTransaction(Message):
    txType = ... # type: PBTxType
    customerCount = ... # type: int
    kWh = ... # type: float
    charge = ... # type: float
    regulation = ... # type: bool
    
    @property
    def customerInfo(self) -> PBCustomerInfo: ...
    
    @property
    def tariffSpec(self) -> PBTariffSpecification: ...
    
    def __init__(self,
        txType : PBTxType = None,
        customerInfo : PBCustomerInfo = None,
        customerCount : int = None,
        kWh : float = None,
        charge : float = None,
        regulation : bool = None,
        tariffSpec : PBTariffSpecification = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBTariffTransaction: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBBalancingControlEvent(Message):
    kwh = ... # type: float
    payment = ... # type: float
    
    def __init__(self,
        kwh : float = None,
        payment : float = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBBalancingControlEvent: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBTariffRevoke(Message):
    tariffId = ... # type: int
    id = ... # type: int
    broker = ... # type: Text
    
    def __init__(self,
        tariffId : int = None,
        id : int = None,
        broker : Text = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBTariffRevoke: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class PBProperties(Message):
    class ValuesEntry(Message):
        key = ... # type: Text
        value = ... # type: Text
        
        def __init__(self,
            key : Text = None,
            value : Text = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> PBProperties.ValuesEntry: ...
        def MergeFrom(self, other_msg: Message) -> None: ...
        def CopyFrom(self, other_msg: Message) -> None: ...
    
    
    @property
    def values(self) -> RepeatedScalarFieldContainer[PBProperties.ValuesEntry]: ...
    
    def __init__(self,
        values : Iterable[PBProperties.ValuesEntry] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PBProperties: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class Empty(Message):
    
    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Empty: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...

class ContextManagerService(Service, metaclass=ABCMeta):
    @abstractmethod
    def handlePBBankTransaction(self,
        rpc_controller: RpcController,
        request: PBBankTransaction,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBCashPosition(self,
        rpc_controller: RpcController,
        request: PBCashPosition,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBDistributionReport(self,
        rpc_controller: RpcController,
        request: PBDistributionReport,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBCompetition(self,
        rpc_controller: RpcController,
        request: PBCompetition,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBProperties(self,
        rpc_controller: RpcController,
        request: PBProperties,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
class ContextManagerService_Stub(ContextManagerService):
    def __init__(self, rpc_channel: RpcChannel) -> None: ...
class MarketManagerService(Service, metaclass=ABCMeta):
    @abstractmethod
    def handlePBActivate(self,
        rpc_controller: RpcController,
        request: PBActivate,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBCompetition(self,
        rpc_controller: RpcController,
        request: PBCompetition,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBBalancingTransaction(self,
        rpc_controller: RpcController,
        request: PBBalancingTransaction,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBClearedTrade(self,
        rpc_controller: RpcController,
        request: PBClearedTrade,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBDistributionTransaction(self,
        rpc_controller: RpcController,
        request: PBDistributionTransaction,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBCapacityTransaction(self,
        rpc_controller: RpcController,
        request: PBCapacityTransaction,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBMarketBootstrapData(self,
        rpc_controller: RpcController,
        request: PBMarketBootstrapData,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBMarketPosition(self,
        rpc_controller: RpcController,
        request: PBMarketPosition,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBMarketTransaction(self,
        rpc_controller: RpcController,
        request: PBMarketTransaction,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBOrderbook(self,
        rpc_controller: RpcController,
        request: PBOrderbook,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBWeatherForecast(self,
        rpc_controller: RpcController,
        request: PBWeatherForecast,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBWeatherReport(self,
        rpc_controller: RpcController,
        request: PBWeatherReport,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBBalanceReport(self,
        rpc_controller: RpcController,
        request: PBBalanceReport,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
class MarketManagerService_Stub(MarketManagerService):
    def __init__(self, rpc_channel: RpcChannel) -> None: ...
class PortfolioManagerService(Service, metaclass=ABCMeta):
    @abstractmethod
    def handlePBCustomerBootstrapData(self,
        rpc_controller: RpcController,
        request: PBCustomerBootstrapData,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBTariffSpecification(self,
        rpc_controller: RpcController,
        request: PBTariffSpecification,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBTariffStatus(self,
        rpc_controller: RpcController,
        request: PBTariffStatus,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBTariffTransaction(self,
        rpc_controller: RpcController,
        request: PBTariffTransaction,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBTariffRevoke(self,
        rpc_controller: RpcController,
        request: PBTariffRevoke,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
    @abstractmethod
    def handlePBBalancingControlEvent(self,
        rpc_controller: RpcController,
        request: PBBalancingControlEvent,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
class PortfolioManagerService_Stub(PortfolioManagerService):
    def __init__(self, rpc_channel: RpcChannel) -> None: ...
class ConnectionService(Service, metaclass=ABCMeta):
    @abstractmethod
    def pingpong(self,
        rpc_controller: RpcController,
        request: Empty,
        done: Optional[Callable[[Empty], None]],
    ) -> Future[Empty]: ...
class ConnectionService_Stub(ConnectionService):
    def __init__(self, rpc_channel: RpcChannel) -> None: ...
class SubmitAdapter(Service, metaclass=ABCMeta):
    @abstractmethod
    def submitOrder(self,
        rpc_controller: RpcController,
        request: PBOrder,
        done: Optional[Callable[[PBCallCompleted], None]],
    ) -> Future[PBCallCompleted]: ...
    @abstractmethod
    def submitTariffSpec(self,
        rpc_controller: RpcController,
        request: PBTariffSpecification,
        done: Optional[Callable[[PBCallCompleted], None]],
    ) -> Future[PBCallCompleted]: ...
class SubmitAdapter_Stub(SubmitAdapter):
    def __init__(self, rpc_channel: RpcChannel) -> None: ...